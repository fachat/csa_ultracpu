
; this lets the CPU a) init the video memory and then
; b) show a boot menu to select which boot option to use
; from 3032, 4032 and 8032(8296) version.
;
; Note that during init (after reset) the uPET CPLD has a 
; memory mapping that maps some upper ROM into the upper half
; of bank 0. Only when a write access to the ROM is found as 
; trigger, the real bank address is used.


	*=$f000
vreset
	; init the CPU
	sei
	cld
	ldx #$ff
	txs

	; switch to native mode
	clc
	xce

	; set ac to single byte ...
	sep #%00100000
	; ... and tell the assembler about it
	.as

	; set X/Y registers to 16 bit ...
	rep #%00010000
	; ... and tell the assembler about it
	.xl

	; -----------------------
	; copy over charrom to RAM
	; $0000-$1fff in bootimg

	ldx #0
copy
	lda $0f0000,x	; location in test ROM bank
	sta $070000,x	; location in RAM - uppermost RAM bank
	inx
	cpx #$2000
	bne copy

	jsr clrscreen
	jsr selecttext

	; switches to .xs
	sep #%00010000
	.xs

cloop	jsr checkkbd
	bcs cloop
	
	rep #%00010000
	.xl

	dey
	beq basic2
	dey
	beq basic40
	bne basic80

	; upgrade ROMs with BASIC2
basic2	.(
	; -----------------------
	; copy over PET ROM into low RAM
	; $2000-$5fff in bootimg

	ldx #$3fff
rloop	lda $0f2000,x
	sta $00c000,x
	dex
	bmi end
	cpx #$28ff	; I/O window
	bne rloop
	ldx #$27ff
	bne rloop
	.)

basic80
	ldy #1
	bne basic4
	; BASIC4 for 40/80 column machines (with CRTC)
basic40	
	ldy #0
basic4	.(
	; -----------------------
	; copy over PET ROM for 40 columns into low RAM
	; $7000-$bfff in bootimg
	ldx #$4fff
rloop	lda $0f7000,x
	sta $00b000,x
	dex
	bmi end40
	cpx #$38ff	; I/O window
	bne rloop
	ldx #$37ff
	bne rloop
	.)

end40	; check copying 80 col editor?
	tya
	beq end

	; BASIC4 with 80 column machines (with CRTC)
	; as option for BASIC4 with 40 cols
	.(
	; -----------------------
	; copy over PET 80 column editor ROM into low RAM
	; $6000-$6fff in bootimg
	ldx #$0fff
rloop	lda $0f6000,x
	sta $00E000,x
	dex
	bmi end80
	cpx #$08ff	; I/O window
	bne rloop
	ldx #$07ff
	bne rloop

end80	lda #%00000010
	sta $e800	; control port to 80 column
	.)

	; -----------------------
	; switch back to emulation mode
end
	; set X/Y registers to 8 bit ...
	sep #%00010000
	; ... and tell the assembler about it
	.xs

	; switch to native mode
	sec
	xce


	; -----------------------
	; copy over trampolin to low RAM
	ldx #endtramp-tramp-1
tloop	lda tramp,x
	sta 0,x
	dex
	bpl tloop
	jmp 0

tramp	sta $ffffff	; unlock init mode
	jmp ($fffc)	; RESET vector
endtramp


	.xs

checkkbd .(
	; init
	lda #$38	; DDR, CA2 output hi
	sta $e811
	lda #$0f	; set keybd row select to output
	sta $e810
	lda #$3c	; Port A, CA2 output hi
	sta $e811
	lda #$38	; DDR, CB2 output hi
	sta $e813
	lda #0		; all bits input PB
	sta $e812
	lda #$3c	; Port B, CB2 output hi
	sta $e813
	; scan
	ldx #$50
	lda $e810
	and #$F0
	sta $e810
rloop	ldy #8
ioloop	lda $e812
	cmp $e812
	bne ioloop
bloop	lsr
	bcc gotone
nextr	dex
	beq done
	dey
	bne bloop
	inc $e810
	bra rloop	; always

done	sec
	rts

gotone	; x has number of key
	; key number is (9-row)+(7-col)+1 where row/col are from www.6502.org/users/andre/petindex/keymap/petgraph.png
	cpx #18		; 7/6 = "2"
	beq is2
	cpx #42		; 4/6 = "4"
	beq is4
	cpx #50		; 3/6 = "8"
	beq is8
	sec
	rts
is8	ldy #3
	.byt $2c
is4	ldy #2
	.byt $2c
is2	ldy #1
	clc
	rts
	.)

	; back in 16bit land
	.xl

clrscreen .(
	ldx #999
	lda #$20
loop	sta $8000,x
	dex
	bpl loop
	rts
	.)

selecttext .(
	ldx #0
outl	lda text,x
	beq endt
	and #$bf	; to PET Screencode
	sta $8000,x
	inx
	bne outl
endt	rts
	
text	.asc "                                        "
	.asc "PRESS KEYS FOR BOOT OPTION              "
	.asc "                                        "
	.asc "* BASIC ", "2"+$80, " (40 COLUMNS)                  "
	.asc "* BASIC 4, ", "4"+$80, "0 COLUMNS                   "
	.asc "* BASIC 4, ", "8"+$80, "0 COLUMNS                   "
	.asc 0

	.)

vcop
vbrk	
vabort
vnmi
virq
	rti

	.dsb $fff4-*,$ff
	.word vcop
	.word vbrk
	.word vabort
	.word vnmi
	.word vreset
	.word virq
