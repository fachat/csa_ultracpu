
; The first block of this is loaded by the IPL from the SPI Flash chip into the uppermost
; 256 bytes of RAM in bank zero, where the CPU boots from.
; This boot block then copies the last 2k of this to $8800 on bank0, and jumps
; to it to execute it.
; 
; Note that this relies on the Flash ROM containing the
; PET ROM images to copy from in this order:
;
; $00000  IPL code (256 byte)
; $00800  Boot code (2k) - this code
; $01000  @MON (4k copied to $a000)
; $02000  charrom (8k)
; $04000  BASIC2 + EDIT2 + KERNEL2 (16k)
; $08000  EDIT8 (extended)
; $09000  BASIC4 + EDIT4(extended) + KERNAL4 (20k)
; $0e000  EDIT4 (extended, C64 kbd)
; $0f000  EDIT8 (extended, C64 kbd)
; $10000  EDIT4 (orig)
; $11000  EDIT8 (orig)
; $12000  EDIT4 (bare, C64 kbd)
; $13000  EDIT8 (bare, C64 kbd)

VBANK	=$080000

SPICTRL	=$e808
SPIDATA	=$e809
SPIPEEK	=$e80a

VIA	=$e840
VIA_PCR	=12

CRTC	=$e880

RUNADDR	=$9000

shift	=$87ff
char	=$87fe

VCTRL   =$e800
MCTRL   =$e801
BANK    =$e802
SPEED   =$e803
R8296   =$fff0


;BOOTCOL	=$15	; dark grey background, light green text
;BOOTCOL	=$1f	; dark grey background, white text
;BOOTCOL	=$50	; black text on light green background
BOOTCOL	=$05	; black background with light green text

BRDCOL	=0	; border colour = black

	; ------------------------
	; this is the actual boot code, 
	; loaded from Flash via SPI to $8800 by above ipl code

	.dsb 7*256

	*=RUNADDR
jmpboot
	.(

	; code runs in .xs/.as
	.xs
	.as

	; -----------------------
	; warm reboot init

	; init control registers
	lda #0
	sta VCTRL	; $e800 - default to 40 column
	sta MCTRL	; $e801
	sta SPEED	; $e803 - 1MHz

	; init the CRTC emulation
	jsr setviccy_xs

	lda #$20	; for the PET default CRTC base address of $1000
	sta BANK	; $e802

	; uppercase char
	lda #12
	sta VIA+VIA_PCR

	; -----------------------
	; switch Ethernet - if exists - to low power mode
	lda #4			; ENC28J60 ethernet module
	sta SPICTRL
	lda #%01011110		; write control register ECON2
	sta SPIDATA
	lda #%00101000		; set PWRSV and VRPS
	sta SPIDATA
	lda #0
	sta SPICTRL

	; -----------------------
	; copy over charrom to RAM
	; $2000-$3fff in flash img

        ; set X/Y registers to 16 bit ... 
        rep #%00010000 
        ; ... and tell the assembler about it 
        .xl

	.(
	lda #$20
	ldx #$c000
	ldy #$2000
	jsr flash2direct_xl
	; now copy from bank 0 to target location
	ldx #0
copy
	lda $c000,x	; location in test ROM bank
	sta VBANK,x	; location in RAM - uppermost RAM bank
	inx
	cpx #$2000
	bne copy
	.)


	jsr do_menu_xl

	;----------------------------------------------------
	; 1= Basic1, 2=Basic2, 3=Basic4
	pha
	and #%00000011	; ROM version

	cmp #1
	bne not_b1	

basic1	.(
	; -----------------------
	; copy over BASIC 1 charrom to RAM
	; $14000-$15fff in flash img

	lda #$80
	ldx #$c000
	ldy #$2000
	jsr flash2direct2_xl

	; now copy from bank 0 to target location
	ldx #0
copy
	lda $c000,x	; location in test ROM bank
	sta VBANK,x	; location in RAM - uppermost RAM bank
	inx
	cpx #$2000
	bne copy

	;------------------------
	; BASIC 1
	lda #$40	; source page in Flash
	ldx #$c000	; target addr
	ldy #$4000	; len
	jsr flash2direct_xl
	
	pla
	bmi b1_orig	; check BASIC1 patch

	; apply BASIC1 patch like in VICE
	jsr patch_rom1_xl
b1_orig
	lda #%10000000	; write protect $c000-$ffff
	jmp end
	.)
	
	;------------------------
not_b1	cmp #2
	bne not_b2
	
	;------------------------
	; upgrade ROMs with BASIC2
basic2	.(
	; copy over PET ROM into low RAM
	; $4000-$7fff in bootimg to $c000-$ffff in RAM

	lda #$80
	ldx #$c000
	ldy #$4000
	jsr flash2direct_xl

	pla		; ignore other flags
	lda #%10000000	; write protect $c000-$ffff
	jmp end
	.)

	;----------------------------------------------------
not_b2	; only basic 4 left
	;----------------------------------------------------
basic4	.(
	; -----------------------
	; copy over @MON 
	lda #$10
	ldx #$a000
	ldy #$1000
	jsr flash2direct_xl
	
	; -----------------------
	; copy over PET BASIC4 $b000-$dfff
	lda #$c0
	ldx #$b000
	ldy #$3000
	jsr flash2direct_xl

	; copy over PET KERNEL4 $f000-$ffff
	lda #$f0
	ldx #$f000
	ldy #$1000
	jsr flash2direct_xl

	pla		; bits 7/6/5 have number of editor ROM
	pha
	and #%11100000
	lsr
	ldx #$e000
	ldy #$1000
	jsr flash2direct2_xl

	; check BASIC4 patch
	pla
	pha
	bmi b4_orig
	jsr patch_rom4_xl
b4_orig
	; check 80 column bit
	pla
	pha
	and #%01000000
	beq col40
	lda #%00000010
	sta VCTRL
col40
	; check 8296 bit
	pla
#if 0	
	and #%00010000
	beq not_96
	; 8296
	lda #%11101000
	.byt $2c
#endif
not_96	lda #%11100000

	; fallthrough
	.)

	; -----------------------
	; switch back to emulation mode
end
	sta MCTRL

	; set screen to green-on-black
	lda #$05
	jsr setcol_xl

	; set X/Y registers to 8 bit ...
	sep #%00010000
	; ... and tell the assembler about it
	.xs

	; switch to native mode
	sec
	xce

	jmp ($fffc)	; RESET vector

	; ----------------------------
	; copy an area from flash to bank 0 RAM

	.xl
	; AC = page in Flash (8bit)
	; XR = start in bank 0 (16bit)
	; YR = number of bytes (16 bit)
	; flash bank 0
flash2direct_xl 
	clc
	.byt $24
	; flash bank 1
flash2direct2_xl
	sec
	.(
	pha
	lda #1
	sta SPICTRL	; enable Flash
	lda #3
	sta SPIDATA	; READ command
	lda #0
	rol		; rotate carry into A16
	sta SPIDATA	; bits 23-16
	pla
	sta SPIDATA	; bits 15-8
	lda #0
	sta SPIDATA	; bits 7-0

	lda SPIDATA	; trigger shift in of first byte into SR (value read is still invalid)

readloop
	lda SPIDATA	; read byte, trigger shift in of next byte
	cpx #$e800	; skip I/O window
	bcc ok
	cpx #$e900
	bcc nok
ok	sta 0,x
nok	inx
	dey
	bne readloop
	
	lda #0
	sta SPICTRL	; deselect Flash
	rts
	.)


	.(
	; set Viccy registers
	; note: stored backwards, so alt/compat modes are set
	; before affected registers are written to
	.xs
&setviccy_xs .(
        ldy #41
        sty CRTC         ; register number
l0      lda vdctab,y
	sty CRTC
        sta CRTC+1       ; register value w/ auto-inc of register number
lx      dey
        bpl l0

	; disable sprites
	ldx #8
	ldy #0
	lda #51
sl	sta CRTC
	sty CRTC+1
	clc
	adc #4
	dex
	bne sl
        rts

&vdctab .byt 0          ; r0 ignored
        .byt 40         ; r1 number of chars per line displayed
        .byt 0,0,0,0    ; r2-5 ignored
        .byt 25         ; r6 char rows displayed
        .byt 0          ; r7 ignored
        .byt 0          ; r8: b7= 80 col mode; b1=interlace, b0=double
        .byt 7          ; r9: rows per char (-1)
        .byt 32         ; r10: cursor start (b0-4, b6/5= mode, 00=solid, 01=off, 1x= blink)
        .byt 7          ; r11: cursor end line
        .byt >$1000     ; r12: start of vid memory high (upet compat -> $9xxx in video bank)
        .byt <$1000     ; r13: start of vid memory low (upet compat -> $9xxx in video bank)
        .byt >$1000     ; r14: cursor pos high
        .byt <$1000     ; r15: cursor pos low
        .byt 0,0,0,0    ; r16-r19: ignored
        .byt >$d000     ; r20: start of attribute memory high
        .byt <$d000     ; r21: start of attribute memory low
        .byt 9          ; r22: number of bits displayed of a char (horizontal)
        .byt 15         ; r23: displayed number of rows per char
        .byt 0          ; r24: b0-3 scroll down, b4: up/low border ext, b5 blink rate, b6: reverse
        .byt 0          ; r25: b0-3 scroll right, b4: l/r border ext, b6: attrib enable, b7: bitmap mode
        .byt BOOTCOL    ; r26: b0-3: bg colour, b4-7: fg colour
        .byt 0          ; r27: address incr
        .byt >$0000     ; r28: char set address high
        .byt 7          ; r29: underline scanline
        .byt 0,0        ; r30/31: rasterline counter low/high
        .byt 128+4+16   ; r32: b2: extended (cpet compat), b4: disp en, b7: upet compat
        .byt $0f        ; r33: b0-3: bg colour 1, b4-7: bg colour 2
        .byt BRDCOL     ; r34: border colour (b0-3)
        .byt 0          ; r35: irq control
        .byt 127        ; r36: irq status (clear all sources)
        .byt 0          ; r37: v/h sync status (VDC)
        .byt 13         ; r38: horizontal position (chars)
        .byt 59         ; r39: vertical position (rasterlines)
        .byt 0          ; r40: alt match
        .byt 0          ; r41: alt raster row

	.)

	.)

	; ---------------------------------------------------------


	.xl

PATCH	=$ef00

patch_rom1_xl .(


	; transferred over from VICE
	lda #$ea	; NOP
	sta $f471
	sta $f472
	sta $f180
	sta $f181
	lda #$f8
	sta $f3ef
	lda #$f7
	sta $f3f3

	; patch area start
	ldx #PATCH

	; jmp to first patch
	txa
	sta $f370
	lda #>PATCH
	sta $f371

	ldy #0
pl0	lda PATCH_0,y
	sta 0,x
	inx
	iny
	cpy #5
	bne pl0

	; jump to second patch
	txa
	sta $f379
	lda #>PATCH
	sta $f37a

	ldy #0
pl1	lda PATCH_1,y
	sta 0,x
	inx
	iny
	cpy #19
	bne pl1

	; JSR to third patch
	lda #$20
	sta $f3cc
	txa
	sta $f3cd
	lda #>PATCH
	sta $f3ce

	ldy #0
pl2	lda PATCH_2,y
	sta 0,x
	inx
	iny
	cpy #10
	bne pl2

	; jmp to fourth patch
	txa
	sta $f6c1
	lda #>PATCH
	sta $f6c2
	
	ldy #0
pl3	lda PATCH_3,y
	sta 0,x
	inx
	iny
	cpy #5
	bne pl3

	; jump to fifth patch
	txa
	sta $f6c7
	lda #>PATCH
	sta $f6c8
	
	ldy #0
pl4	lda PATCH_4,y
	sta 0,x
	inx
	iny
	cpy #18
	bne pl4

	; insert sixth patch
	ldy #0
pl5	lda PATCH_5,y
	sta $f381,y
	iny
	cpy #8
	bne pl5

	; jump to seventh patch
	txa
	sta $f6f4
	lda #>PATCH
	sta $f6f5

	ldy #0
pl6	lda PATCH_6,y
	sta 0,x
	inx
	iny
	cpy #6
	bne pl6

	; insert marker
	ldy #0
	tya		; fill B with zero, so cmp work?
plm	lda MARK,y
	sta 0,x
	inx
	iny
	cmp #0
	bne plm

	rts

PATCH_0	.byt $a9, $60, $85, $f0, $60 
PATCH_1 .byt $20, $b6, $f0, $a5, $f0, $20, $5b, $f1, $20, $87, $f1, $85, $f7, $20, $87, $f1, $85, $f8, $60 
PATCH_2 .byt $20, $7a, $f1, $20, $e6, $f6, $ad, $0b, $02, $60
PATCH_3	.byt $a9, $61, $85, $f0, $60 
PATCH_4	.byt $20, $ba, $f0, $a5, $f0, $20, $2c, $f1, $a5, $f7, $20, $67, $f1, $a5, $f8, $4c, $67, $f1 
PATCH_5	.byt $ae, $0c, $02, $70, $46, $20, $87, $f1
PATCH_6	.byt $20, $2c, $f1, $4c, $7e, $f1 

MARK	.asc "BASIC1 PATCH FOR IEEE488",0
	.)


PATCH4	=$fe20

patch_rom4_xl .(

	; patch target area start (max 1 page due to #>PATCH4 below)
	ldx #PATCH4

	; from http://www.6502.org/users/andre/cbmhw/ryofat40/index.html
	lda #$20
	sta $f0d8
	; jsr to first patch
	txa
	sta $f0d9
	lda #>PATCH4
	sta $f0da

	ldy #0
pl0	lda PATCH4_0,y
	sta 0,x
	inx
	iny
	cpy #12
	bne pl0

	rts

PATCH4_0 .(
	lda #4
l1	sec
	sbc #1
	bne l1
	lda $e840
	rts
	.byt $c2	; checksum fix
	.)

	.)

#include "boot_menu.a65"

	.dsb RUNADDR+2048-*,$ff
	.)

