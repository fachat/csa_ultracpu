
; if defined, print out some measurements for timers etc instead of just OKing
#define	DEBUG

CHAR	=$80000+3*16

irqvec	=$90

VDC	=$e880
VCTRL	=$e800
SCTRL	=$e803

BRDCOL	=0	; black
BGCOL	=0	; black
FGCOL	=5	; light green

HOME	=19
CRSD	=17
CR	=13

p1	=$02
p2	=$04
tmp	=$06
cnt	=$08
cnt2	=$09
tmp2	=$0a

BSOUT	=$ffd2

V_RLINE	=30

	.word $0401
	* = $0401

	.word link
	.word 10		; line number
	.byt $9e, "1040"
	.byt 0
link	.byt $00,$00

	.dsb $0410-*, $aa

l1000	; start of program

	sei
	jsr iniirq
loop
	jsr setviccy
	jsr clrscr
	jsr inichain
	cli

	lda #0
	sta vdctab+24

	jsr demo1	; print header
	jsr demoborders	; rasterline ints & borders
	jsr demovdc
	jsr democpet
	jsr demomcol
	jsr demoilace
	jsr democursor
	jsr demohwpos
	jsr demohscrl
	jsr demovert
	jsr demo4080
	jsr demo50rows
	jsr democset
	jsr demoreset
	jsr demohires

	jsr wait
	jsr wait
	jsr wait
x jmp x
	jsr stopirq
	sei
	jsr resetchain
	jmp loop


; ---------------------------------------------------------

	.(
&demo1	lda #<txt
	ldy #>txt
	jsr txtout
	jmp wait

txt	.asc HOME, CRSD, CRSD
	.asc "           THE ULTRACPU BOARD ... ON THE WAY TO THE ULTIMATE PET!"
	.asc CR,0
	.)

; --------------------

	.(
&demovdc
	lda #<txt
	ldy #>txt
	jsr txtout

	ldy #0
l0	tya
	sta $8800+5*80+10,y
	iny
	cpy #60
	bcc l0

	lda #<itab
	ldy #>itab
	jsr addirq

	jmp wait

idemo2	
	ldx #39
	lda #16
	jsr sreg	; disable ColourPet mode
	ldx #25
	lda #64+16
	jsr sreg	; enable VDC attribute mode

	lda #41
	sta VDC
	inc VDC+1
	rts

itab	.word idemo2-1
	.word 149
	.word 0


txt	.asc "           * C128 VDC COMPATIBLE MODE WITH BLINK/UNDERLINE"
	.asc CR,0
	.)

; --------------------

	.(
&democpet
	lda #<txt
	ldy #>txt
	jsr txtout

	ldy #0
l0	tya
	sta $8800+6*80+10,y
	iny
	cpy #60
	bcc l0

	lda #<itab
	ldy #>itab
	jsr addirq

	jmp wait

idemo3	
	ldx #39
	lda #20
	jsr sreg	; enable ColourPet mode
	ldx #25
	lda #0+16
	jsr sreg	; disable VDC attribute mode

	lda #41
	sta VDC
	inc VDC+1
	rts

itab	.word idemo3-1
	.word 167
	.word 0

txt 	.asc "           * COLOUR PET COMPATIBLE COLOUR MODE"
	.asc CR,0
	.)

; --------------------

	.(
&demomcol
	lda #<txt
	ldy #>txt
	jsr txtout

	ldy #0
l0	tya
	sta $8800+7*80+10,y
	iny
	cpy #60
	bcc l0

	lda #<itab
	ldy #>itab
	jsr addirq

	jmp wait

idemo3	
	ldx #39
	lda #20
	jsr sreg	; enable ColourPet mode (+attrib = multicolour)
	ldx #25
	lda #64+16
	jsr sreg	; enable VDC attribute mode (+cpet =multicolour)

	lda #41
	sta VDC
	inc VDC+1
	rts

itab	.word idemo3-1
	.word 185
	.word 0

txt 	.asc "           * MULTI-COLOUR MODE"
	.asc CR,0
	.)

; --------------------

	.(
&demoilace
	lda #<txt
	ldy #>txt
	jsr txtout

	lda #<itab
	ldy #>itab
	jsr addirq

	jmp wait

idemo4	
	ldx #25
	lda #16
	jsr sreg

	ldx #8
	lda #2+128
	jsr sreg	; interlace mode

	lda #41
	sta VDC
	inc VDC+1
	rts

itab	.word idemo4-1
	.word 203
	.word 0

txt 	.asc "           * INTERLACE MODE"
	.asc CR,0
	.)

; --------------------

	.(
&democursor
	lda #<txt
	ldy #>txt
	jsr txtout

	lda #<itab
	ldy #>itab
	jsr addirq

	jmp wait

idemo5	
	ldx #10
	lda #0+64		; cursor blink on 
	jsr sreg

	ldx #8
	lda #128
	jsr sreg	; interlace mode off

	lda #41
	sta VDC
	inc VDC+1
	rts

itab	.word idemo5-1
	.word 218
	.word 0

txt 	.asc "           * HARDWARE CURSOR"
	.asc CR,0
	.)

; --------------------

	.(
&demohwpos
	lda #<txt
	ldy #>txt
	jsr txtout

	lda #<itab
	ldy #>itab
	jsr addirq

	jmp wait

idemo5	
	ldx #44
	lda vdctab+44
	clc
	adc #3		; shift three to the right
	jsr sreg
	ldx #1
	lda #60		; only 60 chars
	jsr sreg
	ldx #27
	lda #20		; compensate
	jsr sreg	

	lda #41
	sta VDC
	inc VDC+1
	rts

itab	.word idemo5-1
	.word 235
	.word 0

txt 	.asc "           * HORIZONTAL WIDTH AND POSITION"
	.asc CR,0
	.)

; --------------------

	.(
&demohscrl
	lda #<txt
	ldy #>txt
	jsr txtout

	lda #<itab
	ldy #>itab
	jsr addirq

	jmp wait

idemo5	
	ldx #44
	lda vdctab+44	; reset shift
	jsr sreg
	ldx #1
	lda #80		; reset chars to 80
	jsr sreg
	ldx #27
	lda #0		; reset compensate
	jsr sreg	

	ldx #25
	lda cnt2
	lsr
	lsr
	lsr
	lsr
	ora #16
	jsr sreg

	lda #41
	sta VDC
	inc VDC+1
	rts

itab	.word idemo5-1
	.word 253
	.word 0

txt 	.asc "           * HORIZONTAL SMOOTH SCROLL"
	.asc CR,0
	.)

; --------------------

	.(
&demoborders
	lda #<txt
	ldy #>txt
	jsr txtout

	lda #<itab
	ldy #>itab
	jsr addirq

	ldx #41
	lda #5
	jsr sreg

	inc vdctab+41

	jmp wait

idemo5	
	lda #41
	sta VDC
	inc VDC+1
	rts

itab	.word idemo5-1
	.word 140
	.word 0

txt 	.asc CR
	.asc "           * BORDERS AND RASTERLINE INTERRUPTS"
	.asc CR,0
	.)

; --------------------

	.(
cur	.byt 0

&demovert
	lda #<txt
	ldy #>txt
	jsr txtout

	lda #<itab3
	ldy #>itab3
	jsr insirq

	lda #<itab2
	ldy #>itab2
	jsr insirq

	lda #<itab
	ldy #>itab
	jsr insirq

	lda #<itabres
	ldy #>itabres
	jsr addirq

	jmp wait

idemo5	
	ldx #25
	lda #16
	jsr sreg

	lda cnt2
	and #%11100000
	lsr
	lsr
	lsr
	lsr
	lsr
	cmp #7
	bcc x1
	lda #0
x1	sta cur

	ldx #24
	jsr sreg
	sta $8002
noinc
	lda #41
	sta VDC
	inc VDC+1
	rts

itab	.word idemo5-1
	.word 2		;289
	.word 0

txt 	.asc "           * VERTICAL SMOOTH SCROLL + VARIABLE CHAR HEIGHT"
	.asc CR,0

idemo2
	lda cur
	adc #7
	ldx #9
	jsr sreg

	ldx #41
	stx VDC
	inc VDC+1
	rts

itab2	.word idemo2-1
	.word 117
	.word 0

idemo3
	ldx #9
	lda #8
	jsr sreg

	ldx #24
	lda #0
	jsr sreg
	
	ldx #41
	stx VDC
	inc VDC+1
	rts


itab3	.word idemo3-1
	.word 135
	.word 0

idemores
	ldx #25
	lda #16
	jsr sreg
	ldx #41
	stx VDC
	inc VDC+1
	rts

itabres	.word idemores-1
	.word 271
	.word 0


	.)

; --------------------

	.(
&demo4080
	lda #<txt
	ldy #>txt
	jsr txtout

	lda #<itab
	ldy #>itab
	jsr addirq

	jmp wait

idemo5	ldx #8
	lda #0
	jsr sreg

	ldx #1
	lda #40		; 40 cols per line
	jsr sreg
	ldx #27		; compensate 40 chars 
	jsr sreg

	lda #41
	sta VDC
	inc VDC+1
	rts

	rts

itab	.word idemo5-1
	.word 289
	.word 0

txt 	.asc "           * SWITCHABLE 40/80 COLS"
	.asc CR,0
	.)

; --------------------

	.(
&demo50rows
	lda #<txt
	ldy #>txt
	jsr txtout

	lda #<itab
	ldy #>itab
	jsr addirq

	lda #<itab2
	ldy #>itab2
	jsr addirq

	jmp wait

txt 	.asc "           * 50 ROW MODES"
	.asc CR,0

idemo5	
	ldx #37
	stx VDC
l0	bit VDC+1
	bvc l0

	ldx #8
	lda #128+3	; 50x80 mode
	jsr sreg
	
	ldx #1
	lda #80		; reset 40 cols per line
	jsr sreg
	lda #0
	ldx #27		; reset compensate 40 chars 
	jsr sreg

	lda #41
	sta VDC
	inc VDC+1
	rts

itab	.word idemo5-1
	.word 325-18
	.word 0

idemox	ldx #8
	lda #128
	jmp sreg	

itab2	.word idemox-1
	.word 316
	.word 0

	.)

; --------------------
	.(
&democset
	lda #<txt
	ldy #>txt
	jsr txtout

	lda #<itab
	ldy #>itab
	jsr addirq

	lda #<itab2
	ldy #>itab2
	jsr addirq

	jmp wait

idemo5	
	ldx #37
	stx VDC
l	bit VDC+1
	bvc l

	ldx #8
	lda #128	; 25x80 mode
	jsr sreg

	ldx #9
	lda #11		; 12 rasterlines/char
	jsr sreg	

	lda #41
	sta VDC
	inc VDC+1
	rts

itab	.word idemo5-1
	.word 325
	.word 0

idemox	ldx #9
	lda #8		; 9 rasterlines/char
	jsr sreg

	lda cnt2
	and #15
	bne l3

	; scroll a single char
	ldx #15
	lda CHAR,x
	pha

l0	dex
	lda CHAR,x
	lsr
	bcc l1
	ora #$80
l1	inx
	sta CHAR,x
	dex
	bne l0

	pla
	lsr
	bcc l2
	ora #$80
l2	sta CHAR,x
l3	
	lda #41
	sta VDC
	inc VDC+1
	rts


itab2	.word idemox-1
	.word 353
	.word 0

txt 	.asc "           * RE-DEFINABLE CHARACTER SET AND LARGE CHAR HEIGHT"
	.asc CR,0
	.)

; --------------------

; must be last, as it starts hires
	.(
&demohires
	lda #<txt
	ldy #>txt
	jsr txtout

	lda #1
	sta resmode
	sta rescnt

	jmp wait

txt 	.asc "           * HIRES (SINGLE COLOUR, ATTRIBUTE, FG/BG, MULTI) MODES"
	.asc CR,0
	.)
; --------------------

; starts split screen mode

resmode	.byt 0
rescnt	.byt 0

resfl	.byt 0

	.(
cur	.byt 0

&demoreset
	lda #0
	sta resmode
	sta rescnt

	lda #<txt
	ldy #>txt
	jsr txtout

	lda #<itab
	ldy #>itab
	jsr addirq

	lda #<itabc
	ldy #>itabc
	jsr addirq

	; set hires buffer
	php
	sei

	; go to native / wide mode
	clc
	xce
        ; set X/Y registers to 16 bit ...
        rep #%00010000
        .xl

	lda #0
	ldx #$1fff
l3	sta $084000,x
	;txa
	dex
	bne l3

        rep #%00110000
	.al

	lda #$0000	; value
l2	pha
	; times 80=64+16 to get top down bytes
	asl
	asl
	asl
	asl
	sta tmp		; x16
	asl
	asl		; x64
	clc
	adc tmp		; x80
	tax
	pla
	sta $084014,x
	sta $084016,x
	sta $084018,x
	sta $08401a,x
	clc
	adc #1
	cmp #$80
	bcc l2

	; draw a line
	lda #0
:	tax
	tay
	pha
	jsr dot_wxa
	pla
	pha
	clc
	;adc #128
	tax
	pla
	pha
	sec
	sbc #128
	eor #$ffff
	tay
	jsr dot_wxa
	pla
	clc
	adc #1
	cmp #128
	bcc :-

	; end native / wide mode
	lda #0
	ldx #0
        sep #%00110000

	sec
	xce

	.xs
	.as
	plp

	jmp wait

	.al
	.xl

dot_wxa	; draw a hires dot on x/y
	tya
	asl
	asl
	asl
	asl		; x16
	sta tmp
	asl
	asl		; x64
	clc 
	adc tmp	
	sta tmp
	txa
	lsr
	lsr
	lsr
	and #$fe	; index in line
	clc
	adc tmp
	sta tmp
	txa
	and #$0f	; index in word
	asl
	tay
	lda dottab,y
	ldx tmp
	ora $084020,x
	sta $084020,x
	rts

dottab	.word $0080
	.word $0040
	.word $0020
	.word $0010
	.word $0008
	.word $0004
	.word $0002
	.word $0001
	.word $8000
	.word $4000
	.word $2000
	.word $1000
	.word $0800
	.word $0400
	.word $0200
	.word $0100

	.as
	.xs

idemo5	; if alt registers are set during raster match, they are effective in the next rasterline already!
	ldx #46
	lda #1
	jsr sreg

	lda resmode
	beq text

	ldy rescnt
	beq text

hres1	
	ldx #12
	lda #>$4000
	jsr sreg
	inx
	lda #<$4000
	jsr sreg

	ldx #20
	lda #>$d000+5*80
	jsr sreg
	inx
	lda #<$d000+5*80
	jsr sreg

	dey
	bne hres2

        lda #128+64+32+2
set     ldx #46
	jsr sreg        ; disable ColourPet mode

	jmp common

hres2	dey
	bne hres3
	
        lda #128+64+32+4+2
	bne set

hres3	dey
	bne hres4
	
        lda #128+64+32+8+2
	bne set

hres4	lda #128+64+32+8+4+2
	bne set
		
text
	ldx #12
	lda #>$9000+5*80
	jsr sreg
	inx
	lda #<$9000+5*80
	jsr sreg

	ldx #20
	lda #>$d000+5*80
	jsr sreg
	inx
	lda #<$d000+5*80
	jsr sreg

        ldx #46
        lda #128+64+32+8
        jsr sreg        ; disable ColourPet mode

	jmp common

common
	lda #128
	ldx #47
	jsr sreg

	lda resmode
	beq noinc
	lda cnt2
	bne noinc
	lda cnt
	and #1
	bne noinc

	inc rescnt
	lda rescnt
	cmp #5
	bcc noinc
	lda #0
	sta rescnt
noinc
	
	lda cnt
	lsr
	lda cnt2
	ror
	lsr
	cmp #82
	bcc l1
	lda #82
l1	sta cur
	lda #<490
	sec
	sbc cur
	ora #1		; that prevents the top line from flickering, as we are in non-interlace mode
	sta line
	lda #>490
	sbc #0
	sta line+1

	lda #41
	sta VDC
	inc VDC+1

	rts

itab	.word idemo5-1
line	.word 404
	.word 0

iclr
	ldx #46
	lda #0
	jsr sreg

	ldx #47
	lda #0
	jsr sreg

	lda cur
	clc 
	adc #0
l0	tay
	sec
	sbc #9
	bcs l0
	tya
	lsr
	ora #16
	ldx #24
;	jsr sreg

	lda #41
	sta VDC
	inc VDC+1
	rts

itabc	.word iclr-1
	.word 494
	.word 0

txt 	.asc "           * RESETABLE ADDRESS COUNTERS ON RASTERLINE MATCH"
	.asc CR,0
	.)

; ---------------------------------------------------------
; irq chain

last	.word 0
start	.word 0
chain	.word 0

doirq	.(
	ldx #43
	lda #127	; clear all Viccy interrupts
	jsr sreg

	lda chain
	sta p2
	lda chain+1
	sta p2+1
	jsr run

	ldy #4
	lda (p2),y
	tax
	iny
	lda (p2),y
	bne set
	cpx #0
	beq end
set	sta chain+1
	sta p2+1
	stx chain
	stx p2
	bne next
end	lda start
	sta chain
	sta p2
	lda start+1
	sta chain+1
	sta p2+1

;	ldx #41
;	lda #0
;	jsr sreg
next

	ldy #2
	lda (p2),y
	ldx #V_RLINE
	jsr sreg
	iny
	inx
	lda (p2),y
	jsr sreg

	ldx #42
	lda #1
	jsr sreg	; re-enable raster irq
	
	rts
	
run
	ldy #1
	lda (p2),y
	pha
	dey
	lda (p2),y
	pha
	rts
	.)

addirq	.(
	sei
	ldx last
	stx p1
	ldx last+1
	stx p1+1
	sta last
	sty last+1
	ldy #4
	sta (p1),y
	iny
	lda last+1
	sta (p1),y
	cli
	rts 
	.)

insirq	.(
	sei
	sta tmp
	sty tmp+1

	ldx start
	stx p1
	ldx start+1
	stx p1+1

	ldy #5
	lda (p1),y
	sta (tmp),y
	dey
	lda (p1),y
	sta (tmp),y

	lda tmp
	sta (p1),y
	iny
	lda tmp+1
	sta (p1),y

	cli
	rts 
	.)

resetchain .(
	lda start
	sta p1
	lda start+1
	sta p1+1
next	ldy #4
	lda (p1),y
	pha
	iny
	lda (p1),y
	tax
	lda #0
	sta (p1),y
	dey
	sta (p1),y
	stx p1+1
	pla
	sta p1
	ora p1+1
	bne next
	rts
	.)

stopirq	.(
	ldx #42
	lda #0
	jmp sreg
	.)

inichain .(
	lda #<itab
	sta chain
	sta start
	sta last
	lda #>itab
	sta chain+1
	sta start+1
	sta last+1

	lda itab+2
	ldx #V_RLINE
	jsr sreg
	lda itab+3
	inx
	jsr sreg

	ldx #42
	lda #1			; enable raster irq
	jsr sreg
	rts

itab	.word resetscr-1
	.word 520
	.word 0

resetscr
	;inc vdctab+41
	jsr setviccy
	rts
	.)

setr39 .(
	sta tmp
	ldx #39
	stx VDC
	lda VDC+1
	and #%11111100
	ora tmp
	sta VDC+1
	rts
	.)


; ---------------------------------------------------------

irqsave	.word 0

newirq  .(
        lda #43
	sta VDC
	lda VDC+1	; irq status
        bpl noloop
        jsr doirq
retirq  jmp (irqsave)
noloop
	inc cnt2
	bne e
	inc cnt
e	jmp retirq
	.)

iniirq  .(
        lda irqvec
        sta irqsave
        lda irqvec+1
        sta irqsave+1

        lda #0
	sta cnt
	sta cnt2

	php
        sei
        lda #<newirq
        sta irqvec
        lda #>newirq
        sta irqvec+1
        plp
        rts
        .)

freirq  .(
	php
        sei
        lda irqsave
        sta irqvec
        lda irqsave+1
        sta irqvec+1
        plp
        rts
        .)

; ---------------------------------------------------------

sreg	.(
	stx VDC
	sta VDC+1
	rts
	.)

setviccy .(
	lda #3
	sta SCTRL	; 12 MHz CPU
	lda #0		; 40 column, display enable
	sta VCTRL
	ldx #39		; r39
	lda #20
	jsr sreg	; disable uPET compat mode
	ldx #8		; r8
	lda #128
	jsr sreg	; 80 col mode via Viccy
	ldx #46		; r46
	lda #0		; disable any alt modes
	jsr sreg

	ldy #0
	sty VDC		; register number
l0	lda vdctab,y
	sta VDC+3	; register value w/ auto-inc of register number
lx	iny
	cpy #47
	bcc l0
	rts

&vdctab	.byt 0		; r0 ignored
	.byt 80		; r1 number of chars per line displayed
	.byt 0,0,0,0	; r2-5 ignored
	.byt 25		; r6 char rows displayed
	.byt 0		; r7 ignored
	.byt 128	; r8: b7= 80 col mode; b1=interlace, b0=double
	;.byt 7		; r9: rows per char (-1)
	.byt 8		; r9: rows per char (-1)
	.byt 32		; r10: cursor start (b0-4, b6/5= mode, 00=solid, 01=off, 1x= blink)
	.byt 7		; r11: cursor end line
	.byt >$9000	; r12: start of vid memory high
	.byt <$9000	; r13: start of vid memory low
	.byt >$9000+9*80+11	; r14: cursor pos high
	.byt <$9000+9*80+11	; r15: cursor pos low
	.byt 0,0,0,0	; r16-r19: ignored
	.byt >$d000	; r20: start of attribute memory high
	.byt <$d000	; r21: start of attribute memory low
	.byt 9		; r22: ignored
	.byt 7		; r23: character rows displayed
	.byt 0		; r24: b0-3 scroll down, b4: up/low border ext, b5 blink rate, b6: reverse
	.byt 16		; r25: b0-3 scroll right, b4: l/r border ext, b6: attrib enable, b7: bitmap mode
	.byt BGCOL+16	; r26: b0-3: bg colour, b4-7: fg colour
	.byt 0		; r27: address incr
	.byt >$0000	; r28: char set address high
	.byt 7		; r29: underline scanline
	.byt 0,0	; r30/31: rasterline counter low/high
	.byt 0,0,0,0,0	; r32-r36 ignored
	.byt 0		; r37: v/h sync status (VDC)
	.byt 0		; n/a
	.byt 4+16	; r39: b2: extended (cpet compat), b4: disp en, b7: upet compat
	.byt $0f	; r40: b0-3: bg colour 1, b4-7: bg colour 2
	.byt BRDCOL	; r41: border colour (b0-3)
	.byt 0		; r42: irq control
	.byt 127	; r43: irq status (clear all sources)
	.byt 13		; r44: horizontal position (chars)
	;.byt 84		; r45: vertical position (rasterlines)
	.byt 59		; r45: vertical position (rasterlines)
	.byt 0		; r46: alt match

	.)



clrscr	.(
	lda #<$8000
	sta p1
	lda #>$8000
	sta p1+1
	ldx #8		; number of pages
	lda #32		; screen space
	ldy #0
l0	sta (p1),y
	iny
	bne l0
	inc p1+1
	dex
	bne l0
	ldx #8
	lda #FGCOL	; light green
l1	sta (p1),y
	iny
	bne l1
	inc p1+1
	dex
	bne l1
	rts
	.)

hexout	.(
	pha
	lsr
	lsr
	lsr
	lsr
	jsr digout
	pla
	and #$0f
digout	cmp #10		; http://forum.6502.org/viewtopic.php?f=2&t=3164
	bcc d1
	adc #$66
d1	eor #$30
	jmp BSOUT
	.)

crout	lda #13
	.byt $2c
spout	lda #$20
	jmp BSOUT

txtout	.(
	sta p1
	sty p1+1
	ldy #0
l0	lda (p1),y
	beq end
	jsr BSOUT
	iny
	bne l0
end	rts
	.)

wait	.(
	ldx #0
	ldy #0
l0	nop
	lda #20
l1	sec
	sbc #1
	bne l1
	nop
	nop
	nop
	nop
	dey
	bne l0
	dex
	bne l0
	rts
	.)
