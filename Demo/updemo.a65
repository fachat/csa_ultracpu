
; if defined, print out some measurements for timers etc instead of just OKing
#define	DEBUG

irqvec	=$90

VDC	=$e880
VCTRL	=$e800
SCTRL	=$e803

BRDCOL	=0	; black
BGCOL	=0	; black
FGCOL	=5	; light green

HOME	=19
CRSD	=17
CR	=13

p1	=$02
p2	=$04
tmp	=$06
cnt	=$07

BSOUT	=$ffd2

	.word $0401
	* = $0401

	.word link
	.word 10		; line number
	.byt $9e, "1040"
	.byt 0
link	.byt $00,$00

	.dsb $0410-*, $aa

l1000	; start of program

	sei
	jsr setviccy
	jsr clrscr
	jsr iniirq

	;jsr first
	cli

	jsr demo1
	jsr demo2
	jsr demo3
	jsr demo4
	jsr demo5
	jsr demo6
	jsr demo7
	jsr demo8
	jsr demo9
	rts


; ---------------------------------------------------------

	.(
&demo1	lda #<txt
	ldy #>txt
	jsr txtout
	jmp wait

txt	.asc HOME, CRSD, CRSD
	.asc "           THE ULTRACPU BOARD ... ON THE WAY TO THE ULTIMATE PET!"
	.asc CR,0
	.)

; --------------------

	.(
&demo2	lda #<txt
	ldy #>txt
	jsr txtout

	ldy #0
l0	tya
	sta $8800+6*80+10,y
	iny
	cpy #60
	bcc l0

	lda #<itab
	ldy #>itab
	jsr addirq

	jmp wait

idemo2	
	ldx #39
	lda #16
	jsr sreg	; disable ColourPet mode
	ldx #25
	lda #64+16
	jsr sreg	; enable VDC attribute mode

	lda #41
	sta VDC
	inc VDC+1
	rts

itab	.word idemo2-1
	.word 167
	.word 0


txt	.asc CR, CRSD, CRSD
	.asc "           * C128 VDC COMPATIBLE MODE WITH BLINK/UNDERLINE"
	.asc CR,0
	.)

; --------------------

	.(
&demo3	lda #<txt
	ldy #>txt
	jsr txtout

	ldy #0
l0	tya
	sta $8800+7*80+10,y
	iny
	cpy #60
	bcc l0

	lda #<itab
	ldy #>itab
	jsr addirq

	jmp wait

idemo3	
	ldx #39
	lda #20
	jsr sreg	; enable ColourPet mode
	ldx #25
	lda #0+16
	jsr sreg	; disable VDC attribute mode

	lda #41
	sta VDC
	inc VDC+1
	rts

itab	.word idemo3-1
	.word 184
	.word 0

txt 	.asc "           * COLOUR PET COMPATIBLE COLOUR MODE"
	.asc CR,0
	.)

; --------------------

	.(
&demo4	lda #<txt
	ldy #>txt
	jsr txtout

	lda #<itab
	ldy #>itab
	jsr addirq

	jmp wait

idemo4	
	ldx #8
	lda #2+128
	jsr sreg	; interlace mode

	lda #41
	sta VDC
	inc VDC+1
	rts

itab	.word idemo4-1
	.word 203
	.word 0

txt 	.asc "           * INTERLACE MODE"
	.asc CR,0
	.)

; --------------------

	.(
&demo5	lda #<txt
	ldy #>txt
	jsr txtout

	lda #<itab
	ldy #>itab
	jsr addirq

	ldx #14
	lda #>$1000+9*80+12
	jsr sreg
	ldx #15
	lda #<$1000+9*80+12
	jsr sreg

	ldx #10
	lda #0+64		; cursor blink on 
	jsr sreg
	ldx #11
	lda #8
	jsr sreg

	jmp wait

idemo5	
	ldx #8
	lda #128
	jsr sreg	; interlace mode off

	lda #41
	sta VDC
	inc VDC+1
	rts

itab	.word idemo5-1
	.word 218
	.word 0

txt 	.asc "           * HARDWARE CURSOR"
	.asc CR,0
	.)

; --------------------

	.(
&demo6	lda #<txt
	ldy #>txt
	jsr txtout

	lda #<itab
	ldy #>itab
	jsr addirq

	jmp wait

idemo5	
	ldx #44
	lda #11		; shift three to the right
	jsr sreg
	ldx #1
	lda #60		; only 60 chars
	jsr sreg
	ldx #27
	lda #20		; compensate
	jsr sreg	

	lda #41
	sta VDC
	inc VDC+1
	rts

itab	.word idemo5-1
	.word 235
	.word 0

txt 	.asc "           * HORIZONTAL WIDTH AND POSITION"
	.asc CR,0
	.)

; --------------------

	.(
&demo7	lda #<txt
	ldy #>txt
	jsr txtout

	lda #<itab
	ldy #>itab
	jsr addirq

	jmp wait

idemo5	
	ldx #25
	lda #16+3	; shift three to the right
	jsr sreg

	lda #41
	sta VDC
	inc VDC+1
	rts

itab	.word idemo5-1
	.word 253
	.word 0

txt 	.asc "           * HORIZONTAL SMOOTH SCROLL"
	.asc CR,0
	.)

; --------------------

	.(
&demo8	lda #<txt
	ldy #>txt
	jsr txtout

	lda #<itab
	ldy #>itab
	jsr addirq

	jmp wait

idemo5	
	ldx #44
	lda #8		; shift three to the right
	jsr sreg
	ldx #1
	lda #80		; only 60 chars
	jsr sreg
	ldx #27
	lda #0		; compensate
	jsr sreg	

	ldx #25
	lda #16		; shift three to the right
	jsr sreg

	lda #41
	sta VDC
	inc VDC+1
	rts

itab	.word idemo5-1
	.word 271
	.word 0

txt 	.asc "           * HIRES"
	.asc CR,0
	.)
; --------------------

	.(
&demo9	lda #<txt
	ldy #>txt
	jsr txtout

	lda #<itab
	ldy #>itab
	jsr addirq

	jmp wait

idemo5	
	lda #41
	sta VDC
	inc VDC+1
	rts

itab	.word idemo5-1
	.word 290
	.word 0

txt 	.asc "           * BORDERS AND RASTERLINE INTERRUPTS"
	.asc CR,0
	.)

; ---------------------------------------------------------
; irq chain

last	.word 0
start	.word 0
chain	.word 0

doirq	.(
	ldx #43
	lda #127
	jsr sreg
	lda chain
	sta p2
	lda chain+1
	sta p2+1
	jsr run

	ldy #4
	lda (p2),y
	tax
	iny
	lda (p2),y
	bne set
	cpx #0
	beq end
set	sta chain+1
	sta p2+1
	stx chain
	stx p2
	bne next
end	lda start
	sta chain
	sta p2
	lda start+1
	sta chain+1
	sta p2+1
next	ldy #2
	lda (p2),y
	ldx #38
	jsr sreg
	iny
	lda (p2),y
	jsr setr39

	ldx #42
	lda #1
	jsr sreg	; re-enable raster irq
	rts
	
run
	ldy #1
	lda (p2),y
	pha
	dey
	lda (p2),y
	pha
	rts
	.)

addirq	.(
	ldx last
	stx p1
	ldx last+1
	stx p1+1
	sta last
	sty last+1
	ldy #4
	sta (p1),y
	iny
	lda last+1
	sta (p1),y
	rts 
	.)

inichain .(
	lda #<itab
	sta chain
	sta start
	sta last
	lda #>itab
	sta chain+1
	sta start+1
	sta last+1

	lda itab+2
	ldx #38
	jsr sreg
	lda itab+3
	jsr setr39

	ldx #42
	lda #1			; enable raster irq
	jsr sreg
	rts

itab	.word resetscr-1
	.word 400
	.word 0

resetscr
	;inc vdctab+41
	jsr setviccy
	rts
	.)

setr39 .(
	sta tmp
	ldx #39
	stx VDC
	lda VDC+1
	and #%11111100
	ora tmp
	sta VDC+1
	rts
	.)


; ---------------------------------------------------------

irqsave	.word 0
irqmode	.byt 0

newirq  .(
        lda #43
	sta VDC
	lda VDC+1	; irq status
        bpl noloop
        jsr doirq
noloop  jmp (irqsave)
	.)

iniirq  .(
        lda irqvec
        sta irqsave
        lda irqvec+1
        sta irqsave+1

        lda #0
        sta irqmode

	jsr inichain

	php
        sei
        lda #<newirq
        sta irqvec
        lda #>newirq
        sta irqvec+1
        plp
        rts
        .)

freirq  .(
	php
        sei
        lda irqsave
        sta irqvec
        lda irqsave+1
        sta irqvec+1
        plp
        rts
        .)

; ---------------------------------------------------------

sreg	.(
	stx VDC
	sta VDC+1
	rts
	.)

setviccy .(
	lda #3
	sta SCTRL	; 12 MHz CPU
	lda #0		; 40 column, display enable
	sta VCTRL
	lda #39
	sta VDC		; r39
	lda #20
	sta VDC+1	; disable uPET compat mode
	lda #8
	sta VDC		; r8
	lda #128
	sta VDC+1	; 80 col mode via Viccy

	ldy #0
	sty VDC		; register number
l0	lda vdctab,y
	sta VDC+3	; register value w/ auto-inc of register number
lx	iny
	cpy #54
	bcc l0
	rts

&vdctab	.byt 0		; r0 ignored
	.byt 80		; r1 number of chars per line displayed
	.byt 0,0,0,0	; r2-5 ignored
	.byt 25		; r6 char rows displayed
	.byt 0		; r7 ignored
	.byt 128	; r8: b7= 80 col mode; b1=interlace, b0=double
	;.byt 7		; r9: rows per char (-1)
	.byt 8		; r9: rows per char (-1)
	.byt 32		; r10: cursor start (b0-4, b6/5= mode, 00=solid, 01=off, 1x= blink)
	.byt 7		; r11: cursor end line
	.byt >$1000	; r12: start of vid memory high
	.byt <$1000	; r13: start of vid memory low
	.byt >$1000	; r14: cursor pos high
	.byt <$1000	; r15: cursor pos low
	.byt 0,0,0,0	; r16-r19: ignored
	.byt >$d000	; r20: start of attribute memory high
	.byt <$d000	; r21: start of attribute memory low
	.byt 9		; r22: ignored
	.byt 7		; r23: character rows displayed
	.byt 0		; r24: b0-3 scroll down, b4: up/low border ext, b5 blink rate, b6: reverse
	.byt 16		; r25: b0-3 scroll right, b4: l/r border ext, b6: attrib enable, b7: bitmap mode
	.byt BGCOL+16	; r26: b0-3: bg colour, b4-7: fg colour
	.byt 0		; r27: address incr
	.byt >$0000	; r28: char set address high
	.byt 7		; r29: underline scanline
	.byt 0,0,0,0,0,0,0 ; r30-r36 ignored
	.byt 0		; r37: v/h sync status
	.byt 0		; r38: rasterline counter low
	.byt 4+16	; r39: 0/1=rasterline counter high, b2: extended (cpet compat), b4: disp en, b7: upet compat
	.byt 0		; r40: b0-3: bg colour 1, b4-7: bg colour 2
	.byt BRDCOL	; r41: border colour (b0-3)
	.byt 0		; r42: irq control
	.byt 127	; r43: irq status (clear all sources)
	.byt 8		; r44: horizontal position (chars)
	;.byt 84		; r45: vertical position (rasterlines)
	.byt 59		; r45: vertical position (rasterlines)

	.)



clrscr	.(
	lda #<$8000
	sta p1
	lda #>$8000
	sta p1+1
	ldx #8		; number of pages
	lda #32		; screen space
	ldy #0
l0	sta (p1),y
	iny
	bne l0
	inc p1+1
	dex
	bne l0
	ldx #8
	lda #FGCOL	; light green
l1	sta (p1),y
	iny
	bne l1
	inc p1+1
	dex
	bne l1
	rts
	.)

hexout	.(
	pha
	lsr
	lsr
	lsr
	lsr
	jsr digout
	pla
	and #$0f
digout	cmp #10		; http://forum.6502.org/viewtopic.php?f=2&t=3164
	bcc d1
	adc #$66
d1	eor #$30
	jmp BSOUT
	.)

crout	lda #13
	.byt $2c
spout	lda #$20
	jmp BSOUT

txtout	.(
	sta p1
	sty p1+1
	ldy #0
l0	lda (p1),y
	beq end
	jsr BSOUT
	iny
	bne l0
end	rts
	.)

wait	.(
	ldx #0
	ldy #0
l0	nop
	nop
	nop
	nop
	nop
	dey
	bne l0
	dex
	bne l0
	rts
	.)
